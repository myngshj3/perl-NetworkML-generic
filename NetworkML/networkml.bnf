
program ::= statements ;

#predefinitions ::= predefinition | predefinitions predefinition ;
#
#predefinition ::= predefine alias logic_eqn semicoron ;
#
#predefine ::= PREDEFINE ;
#
#alias ::= SPECIAL_SYMBOL ;

logic_eqn ::= unary_logic_eqn | binary_logic_eqn | lpar logic_eqn rpar ;

unary_logic_eqn ::= not logic_operand ;

binary_logic_eqn ::= logic_operand and logic_operand | logic_operand or logic_operand |
		     value_operand eq value_operand | value_operand ne value_operand |
		     value_operand lt value_operand | value_operand le value_operand |
		     value_operand gt value_operand | value_operand ge value_operand ;

value_operand ::= integer | float | string | symbol ;

logic_operand ::= atomic_eqn | not logic_eqn | logic_eqn and logic_eqn |
	          logic_eqn or logic_operand | lpar logic_eqn rpar
;

atomic_eqn ::= true | false ;

true ::= TRUE ;

false ::= FALSE ;

not ::= NOT ;

and ::= AND ;

or ::= OR ;

lpar ::= LPAR ;

rpar ::= RPAR ;


statements ::= statement | statements statement ;

statement ::= subst semicoron | function_call semicoron | conditional_statement | loop
;

subst ::= subst_lterm assign subst_rterm
;

subst_lterm ::= symbol
;

assign ::= ASSIGN
;

subst_rterm ::= float | integer | string | symbol | function_call
;

semicoron ::= SEMICORON
;

function_call ::= symbol tuple
;

tuple ::= lpar rpar | lpar list rpar
;

array ::= lbrace rbrace | lbrace list rbrace ;

list ::= list_element | list comma list_element
;

list_element ::= integer | float | string | symbol | function_call | array
;

integer ::= INTEGER ;

float ::= FLOAT ;

string ::= STRING ;

symbol ::= SYMBOL ;

loop ::= while lpar condition rpar lbracket statements rbracket ;

conditional_statement ::= if_statement | if_elsif_statement |
		      	  if_else_statement | if_elsif_else_statement ;


if_statement ::= if lpar condtion rpar lbracket statements rbracket ;

if_elsif_statement ::= if_statement elsif_statement | if_elsif_statement elsif_statement ;

elsif_statement ::= elsif lpar condition rpar lbracket statements rbracket ;

if_else_statement ::= if_statement else_statement ;

else_statement ::= else lbracket statements rbracket ;

if_elsif_else_statement ::= if_elsif_statement | else_statement ;

condition ::= logic_eqn ;


